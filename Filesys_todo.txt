1) Implement file growth

-Change storage structure from extents (bleh) to something that supports file growth (indexed something or other). Most likely involves work in filesys.c and inode.c 
-File sys is 8mb large. No defined file limit except that of the disk (metadata must be included in this)
	Write an additional function to calculate the max file size left on disk every time a file is made?
-If a program seeks past the EOF and then writes there, zeroes must be filled in for the space that is jumped over
	Two ways of going about doing this. Actually put 0's there or let the OS know there should be x number of 0's and allow other data to be written there
	We can choose which we prefer

2) Subdirectories

-14 character limit on file names
	full path names must be able to be longer
-Every process requires a separate current working directory
	On exec, child inheirits the parent's current directory (change the exec syscall)
-Support for special file names? 
-Open must now be able to open directories
-Remove can delete ~EMPTY~ directories. 


3) New Syscalls

System Call: 	bool chdir (const char *dir)
	Changes the current working directory of the process to dir, which may be relative or absolute. Returns true if successful, false on failure.
System Call: 	bool mkdir (const char *dir)
	Creates the directory named dir, which may be relative or absolute. Returns true if successful, false on failure. Fails if dir already exists or if any directory name in dir, besides the last, does not already exist. That is, mkdir("/a/b/c") succeeds only if /a/b already exists and /a/b/c does not.
System Call: 	bool readdir (int fd, char *name)
	Reads a directory entry from file descriptor fd, which must represent a directory. If successful, stores the null-terminated file name in name, which must have room for READDIR_MAX_LEN + 1 bytes, and returns true. If no entries are left in the directory, returns false.
	. and .. should not be returned by readdir.

	If the directory changes while it is open, then it is acceptable for some entries not to be read at all or to be read multiple times. Otherwise, each directory entry should be read once, in any order.

	READDIR_MAX_LEN is defined in lib/user/syscall.h. If your file system supports longer file names than the basic file system, you should increase this value from the default of 14.

System Call: 	bool isdir (int fd)
		Returns true if fd represents a directory, false if it represents an ordinary file.
System Call: 	int inumber (int fd)
		Returns the inode number of the inode associated with fd, which may represent an ordinary file or a directory.
		An inode number persistently identifies a file or directory. It is unique during the file's existence. In Pintos, the sector number of the inode is suitable for use as an inode number.

4) Synchronization

-Operations on separate files must be handled independently and need not wait for each other
-Multiple reads of the same file must operate concurrently
-Two processes writing to the same file may have their data interleaved. This is okay... Why. Oh god why.
-Extending the file and writing into that section must be atomic (why this and not writing? What the fuck pintos.)
-Operations on separate directories are allowed to occur simultaneously
-Operations on the same direcetory are supposed to wait for each other.
